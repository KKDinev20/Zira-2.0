@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Zira.Presentation.Models.TransactionsListViewModel

@{
    ViewData["Title"] = @TransactionText.Transactions;
    Layout = "Shared/_TransactionsLayout";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4 d-flex align-items-center gap-2">
        <i class="bx bx-wallet text-primary"></i> @TransactionText.Transactions
    </h4>

    @await Html.PartialAsync("QuickAddTransaction")
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form method="get" asp-action="TransactionList" class="mb-4">
        <div class="row">
            <div class="col-md-4">
                <label for="categoryFilter" class="form-label fw-medium text-gray-700 mb-2">
                    @TransactionText.FilterByCategory
                </label>
                <select id="categoryFilter" name="category" class="form-select border-2 rounded-lg px-3 py-2 focus-visible:ring-2 focus-visible:ring-primary transition-colors"
                        onchange="this.form.submit()">
                    <option value="" selected="@(ViewBag.SelectedCategory == "All" ? "selected" : null)">
                        @TransactionText.AllCategories
                    </option>
                    @foreach (var category in Enum.GetValues(typeof(Categories)).Cast<Categories>())
                    {
                        <option value="@category" selected="@(category.ToString() == ViewBag.SelectedCategory ? "selected" : null)">
                            @category.GetLocalizedExpenseCategory()
                        </option>
                    }
                </select>
            </div>
        </div>
    </form>

    <div class="card shadow-lg border-0">
        <div class="card-header bg-white py-3 px-4">
            <h5>@TransactionText.Transactions</h5>
        </div>
        <div class="table-responsive text-nowrap">
            <table class="table table-responsive align-content-center justify-content-center">
                <thead>
                <tr>
                    <th>@TransactionText.TransactionID</th>
                    <th>@TransactionText.Type</th>
                    <th>@TransactionText.Category</th>
                    <th>@TransactionText.Amount</th>
                    <th>@TransactionText.Remark</th>
                    <th>@TransactionText.Reference</th>
                    <th>@TransactionText.TransactionDate</th>
                    <th>@TransactionText.Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in Model.Transactions)
                {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>
                            <i class="fab fa-angular fa-lg text-danger me-3"></i>
                            <strong>@transaction.Type.GetLocalizedTransactionType()</strong>
                        </td>
                        <td>
                            @if (transaction.Type == TransactionType.Expense)
                            {
                                <strong>@transaction.Category?.GetLocalizedExpenseCategory()</strong>
                            }
                            else
                            {
                                <strong>@transaction.Source?.GetLocalizedIncomeSource()</strong>
                            }
                        </td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Remark</td>
                        <td>@transaction.Reference</td>
                        <td>@transaction.Date.ToString("dd-MM-yyyy")</td>
                        <td>
                            <div class="dropdown">
                                <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item" href="@Url.Action("EditTransaction", "Transactions", new { id = transaction.Id })">
                                        <i class="bx bx-edit-alt me-1"></i> @TransactionText.Edit
                                    </a>
                                    <a class="dropdown-item" href="@Url.Action("DeleteTransaction", "Transactions", new { id = transaction.Id })">
                                        <i class="bx bx-trash me-1"></i> @TransactionText.Delete
                                    </a>
                                    @if (transaction.Type == TransactionType.Income)
                                    {
                                        <a href="@Url.Action("SetAsideForSavings", "Transactions", new { transactionId = transaction.Id })"
                                           class="dropdown-item">
                                            <i class='bx bx-credit-card-alt me-1'></i>Set Aside

                                        </a>
                                    }
                                </div>

                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("TransactionList", "Transactions", new { page = 1 })">
                            <i class="tf-icon bx bx-chevrons-left"></i>
                        </a>
                    </li>

                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("TransactionList", "Transactions", new { page = Model.CurrentPage - 1 })">
                            <i class="tf-icon bx bx-chevron-left"></i>
                        </a>
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("TransactionList", "Transactions", new { page = i })">@i</a>
                        </li>
                    }

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("TransactionList", "Transactions", new { page = Model.CurrentPage + 1 })">
                            <i class="tf-icon bx bx-chevron-right"></i>
                        </a>
                    </li>

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("TransactionList", "Transactions", new { page = Model.TotalPages })">
                            <i class="tf-icon bx bx-chevrons-right"></i>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>