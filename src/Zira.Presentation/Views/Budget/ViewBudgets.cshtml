@inject UserManager<ApplicationUser> UserManager
@inject EntityContext DbContext
@model BudgetListViewModel

@{
    ViewData["Title"] = @BudgetText.Budgets;
    var user = await UserManager.GetUserAsync(User);
    var currencyCode = user.PreferredCurrencyCode;
    var currency = await DbContext.Currencies.FirstOrDefaultAsync(c => c.Code == currencyCode);
    var preferredCurrency = currency?.Symbol ?? "лв.";
    Layout = "Shared/_BudgetLayout";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <i class="bx bx-money"></i> @BudgetText.Budgets
    </h4>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["BudgetWarnings"] != null)
    {
        var warnings = TempData["BudgetWarnings"] as List<string>;
        if (warnings != null)
        {
            <div class="toast-container position-fixed bottom-0 end-0 p-3">
                @foreach (var warning in warnings)
                {
                    <div class="bs-toast toast fade show bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <i class="bx bx-error me-2"></i>
                            <div class="me-auto fw-semibold">Предупреждение за бюджет</div>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            @warning
                        </div>
                    </div>
                }
            </div>
        }
    }

    <div class="card shadow-sm">
        <h5 class="card-header">@BudgetText.BudgetList</h5>
        <div class="table text-nowrap">
            <table class="table table-responsive align-content-center justify-content-center text-center">
                <thead>
                <tr>
                    <th>@BudgetText.BudgetId</th>
                    <th>@BudgetText.BudgetCategory</th>
                    <th>@BudgetText.BudgetAmount</th>
                    <th>@BudgetText.WarningThreshold</th>
                    <th>@TransactionText.Remark</th>
                    <th>@BudgetText.BudgetMonth</th>
                    <th>@BudgetText.SpentPercentage</th>
                    <th>@BudgetText.Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var budget in Model.Budgets)
                {
                    string rowClass = "";
                    decimal? spentPercentage = budget.SpentPercentage;

                    if (spentPercentage < budget.WarningThreshold)
                    {
                        rowClass = "table-success";
                    }
                    else if (spentPercentage >= budget.WarningThreshold && spentPercentage < 100)
                    {
                        rowClass = "table-warning";
                    }
                    else
                    {
                        rowClass = "table-danger";
                    }

                    <tr class="@rowClass">
                        <td>#@budget.BudgetId</td>
                        <td>
                            <strong>@budget.Category?.GetLocalizedExpenseCategory()</strong>
                        </td>
                        <td>@budget.Amount.ToString("N2") @budget.Currency.Symbol</td>
                        <td>@budget.WarningThreshold%</td>
                        <td>@budget.Remark</td>
                        <td>@budget.Month.ToString("MMMM yyyy")</td>
                        <td>@spentPercentage.Value.ToString("F2")%</td>
                        <td>
                            <div class="dropdown">
                                <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>

                                <div class="dropdown-menu">
                                    <a class="dropdown-item" href="@Url.Action("EditBudget", "Budget", new { id = budget.Id })">
                                        <i class="bx bx-edit-alt me-1"></i> @TransactionText.Edit
                                    </a>
                                    <a class="dropdown-item" href="@Url.Action("DeleteBudget", "Budget", new { id = budget.Id })">
                                        <i class="bx bx-trash me-1"></i> @TransactionText.Delete
                                    </a>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

        </div>

        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("ViewBudgets", "Budget", new { page = 1 })">
                            <i class="tf-icon bx bx-chevrons-left"></i>
                        </a>
                    </li>

                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("ViewBudgets", "Budget", new { page = Model.CurrentPage - 1 })">
                            <i class="tf-icon bx bx-chevron-left"></i>
                        </a>
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("ViewBudgets", "Budget", new { page = i })">@i</a>
                        </li>
                    }

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("ViewBudgets", "Budget", new { page = Model.CurrentPage + 1 })">
                            <i class="tf-icon bx bx-chevron-right"></i>
                        </a>
                    </li>

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("ViewBudgets", "Budget", new { page = Model.TotalPages })">
                            <i class="tf-icon bx bx-chevrons-right"></i>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

<script type="text/javascript" src="https://code.jquery.com/jquery-1.7.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script>
    const userId = "@User.Identity.Name";
    const notificationContainer = document.getElementById("notification-container");

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.start().then(() => {
        console.log("Connected to notification hub");
    }).catch(err => console.error(err.toString()));

    connection.on("ReceiveNotification", function (message) {
        showNotification(message);
    });

    function showNotification(message) {
        const notification = document.createElement("div");
        notification.className = "toast fade show position-fixed top-0 end-0 p-3 p-3";
        notification.innerHTML = `
        <div class="toast-header">
            <i class="bx bx-error me-2"></i>
            <div class="me-auto fw-semibold">Предужпредение за бюджета</div>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            <strong>Нова нотификация!</strong> ${message}
        </div>
    `;
        document.body.appendChild(notification);

        setTimeout(function () {
            $('.toast').toast('hide');
        }, 5000);
    }
</script>