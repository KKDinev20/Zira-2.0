@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Localization
@using Zira.Presentation.Extensions
@model Zira.Presentation.Models.RegisterViewModel

@{
    ViewData["Title"] = @AuthenticationText.RegisterTitle;
    Layout = "Shared/_AuthenticationLayout";
}

<div class="container-xxl">
    <div class="authentication-wrapper authentication-basic container-p-y">
        <div class="authentication-inner">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-2">@AuthenticationText.RegisterTitle</h4>
                    <p class="mb-4">@AuthenticationText.RegisterSubtitle</p>

                    @if (TempData.ContainsKey("MessageText"))
                    {
                        <div class="alert alert-@TempData["MessageVariant"]">
                            @TempData["MessageText"]
                        </div>
                    }

                    @if (!string.IsNullOrWhiteSpace(ViewData.ModelState.GetFirstGlobalError()))
                    {
                        <div class="alert alert-danger">
                            @ViewData.ModelState.GetFirstGlobalError()
                        </div>
                    }

                    <form id="formAuthentication" asp-action="Register" method="post">
                        @Html.AntiForgeryToken()

                        <div class="mb-3">
                            <label asp-for="Email" class="form-label">@AuthenticationText.EmailLabel</label>
                            <input type="email" class="form-control @(ViewData.ModelState["Email"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                   id="email" name="Email" placeholder="@AuthenticationText.EmailLabel" value="@Model.Email"/>
                            @if (ViewData.ModelState["Email"]?.Errors.Count > 0)
                            {
                                <div class="invalid-feedback">@ViewData.ModelState["Email"]?.Errors[0]?.ErrorMessage</div>
                            }
                        </div>

                        <div class="mb-3 form-password-toggle">
                            <div class="d-flex justify-content-between">
                                <label asp-for="Password" class="form-label">@AuthenticationText.PasswordTitle</label>
                            </div>
                            <div class="input-group input-group-merge">
                                <input
                                    type="password"
                                    class="form-control @(ViewData.ModelState["Password"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                    asp-for="Password"
                                    placeholder="••••••••"
                                    aria-describedby="password"/>
                                <span class="input-group-text cursor-pointer">
                                    <i class="bx bx-hide"></i>
                                </span>
                                @if (ViewData.ModelState["Password"]?.Errors.Count > 0)
                                {
                                    <div class="invalid-feedback">@AuthenticationText.PasswordIsRequiredErrorMessage</div>
                                }
                            </div>
                        </div>

                        <div class="mb-3 form-password-toggle">
                            <div class="d-flex justify-content-between">
                                <label class="form-label" asp-for="ConfirmPassword">@AuthenticationText.ConfirmPassword</label>
                            </div>
                            <div class="input-group input-group-merge">
                                <input type="password" id="confirmPassword" class="form-control @(ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                       name="ConfirmPassword" placeholder="••••••••" value="@Model.ConfirmPassword"/>
                                <span class="input-group-text cursor-pointer">
                                    <i class="bx bx-hide"></i>
                                </span>
                                @if (ViewData.ModelState["ConfirmPassword"]?.Errors.Count > 0)
                                {
                                    <div class="invalid-feedback">@ViewData.ModelState["ConfirmPassword"]?.Errors[0]?.ErrorMessage</div>
                                }
                            </div>
                        </div>

                        <div class="mb-3">
                            <button class="btn btn-primary d-grid w-100" type="submit">@AuthenticationText.SignUpButton</button>
                        </div>
                    </form>

                    <p class="text-center">
                        <span>@AuthenticationText.AlreadyHaveAccount</span>
                        <a asp-controller="Authentication" asp-action="Login" class="text-decoration-none">
                            <span>@AuthenticationText.SignInInstead</span>
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>