@inject UserManager<ApplicationUser> UserManager
@inject EntityContext DbContext
@model Zira.Services.Analytics.Models.ExpenseComparisonModel

@{
    Layout = "Shared/_AnalyticsLayout";
    var user = await UserManager.GetUserAsync(User);
    var currencyCode = user.PreferredCurrencyCode;
    var currency = await DbContext.Currencies.FirstOrDefaultAsync(c => c.Code == currencyCode);
    var preferredCurrency = currency?.Symbol ?? "лв.";
    ViewData["Title"] = @AnalyticsText.FinancialComparison;
}

<div class="container-xxl flex-grow-1 container-p-y" data-test="expense-comparison-container">
    <h4 class="fw-bold py-3 mb-4 d-flex align-items-center gap-2" data-test="expense-comparison-header">
        <i class='bx bx-chart'></i>@AnalyticsText.FinancialComparison
    </h4>

    <div class="card shadow-lg border-0 mb-4" data-test="monthly-comparison-section">
        <div class="card-header bg-white py-3 px-4">
            <h5 class="mb-0 d-flex align-items-center gap-2">
                <i class='bx bx-calendar' ></i> @AnalyticsText.MonthlyComparison
            </h5>
        </div>
        <div class="card-body p-4">
            <table class="table table-responsive" data-test="monthly-comparison-table">
                <thead>
                <tr>
                    <th class="fw-medium">@AnalyticsText.Month</th>
                    <th class="fw-medium">@AnalyticsText.Income</th>
                    <th class="fw-medium">@AnalyticsText.Expenses</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model.MonthlyComparison)
                {
                    <tr>
                        <td class="text-nowrap">@item.Month</td>
                        <td class="text-nowrap">@item.Income.ToString("N2") @preferredCurrency </td>
                        <td class="text-nowrap">@item.Expenses.ToString("N2") @preferredCurrency</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card shadow-lg border-0" data-test="category-chart-section">
        <div class="card-header bg-white py-3 px-4">
            <h5 class="mb-0 d-flex align-items-center gap-2">
                <i class='bx bx-category' ></i> @AnalyticsText.CategoryBased
            </h5>
        </div>
        <div class="card-body p-4">
            <div id="categoryChart"></div>
        </div>
    </div>


    <div class="card shadow-lg border-0 mt-4" data-test="savings-rate-section">
        <div class="card-header bg-white py-3 px-4">
            <h5 class="mb-0 d-flex align-items-center gap-2">
                <i class='bx bx-money' ></i> @AnalyticsText.MonthlySavingsRate
            </h5>
        </div>
        <div class="card-body p-4">
            <table class="table" data-test="savings-rate-table">
                <thead>
                <tr>
                    <th>@AnalyticsText.Month</th>
                    <th>@AnalyticsText.SavingsRate (%)</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model.MonthlySavingsRate)
                {
                    <tr>
                        <td>@item.Month</td>
                        <td>@item.SavingsRate.ToString("0.##")%</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
    // Expenses by category chart
    document.addEventListener('DOMContentLoaded', function() {
        var categoryChartOptions = {
            chart: {
                type: "donut",
                height: 400
            },
            //Select labels by taking/serializing the model of the category comparison and selection the categories enumerator.
            labels: @Json.Serialize(Model.CategoryComparison.Select(x => 
            ((Categories)Enum.Parse(typeof(Categories), x.Category)).GetLocalizedExpenseCategory())),
            // Select data by taking/serializing the model of the category comparison and selection the categories enumerator.
            series: @Json.Serialize(Model.CategoryComparison.Select(x => x.TotalAmount)),
            colors: [
                "#ff6384", "#36a2eb", "#ffce56", "#4bc0c0",
                "#9966ff", "#ff9f40", "#ff6384", "#1abc9c",
                "#f39c12", "#7f8c8d", "#4169e1", "#32cd32",
                "#da70d6", "#228b22"
            ],
            // Position
            legend: {
                position: "bottom"
            },
            // Format Data
            dataLabels: {
                enabled: true,
                formatter: function (val) {
                    return parseInt(val) + "%";
                }
            },
            // Format Y-axis to show the valure and the preferred Currency.
            tooltip: {
                y: {
                    formatter: function(value) {
                        return  value.toLocaleString() + ' @preferredCurrency';
                    }
                }
            }
        };

        var categoryChart = new ApexCharts(document.querySelector("#categoryChart"), categoryChartOptions);
        categoryChart.render();

    });
</script>