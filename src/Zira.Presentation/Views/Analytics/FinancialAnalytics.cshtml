@model Zira.Services.Analytics.Models.FinancialSummaryModel

@{
    Layout = "Shared/_AnalyticsLayout";
    ViewData["Title"] = @AnalyticsText.FinancialOverview;
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h2 class="fw-bold mb-4">Financial Summary</h2>

    <div class="row g-4">
        <div class="col-md-6">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-white py-3 px-4">
                    <h4 class="mb-0">Income vs Expenses</h4>
                </div>
                <div class="card-body p-4">
                    <canvas id="incomeExpensesChart"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-white py-3 px-4">
                    <h4 class="mb-0">Net Worth</h4>
                </div>
                <div class="card-body p-4">
                    <div class="d-flex align-items-center justify-content-center h-100">
                        <div class="text-center">
                            <div class="fs-4 fw-bold text-primary mb-2">
                                @Model.NetWorth.ToString("C")
                            </div>
                            <div class="text-muted">Total Net Worth</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-lg border-0 mt-4">
        <div class="card-header bg-white py-3 px-4">
            <h4 class="mb-0">Savings Goal Progress</h4>
        </div>
        <div class="card-body p-4">
            @foreach (var goal in Model.SavingsGoals)
            {
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h5 class="mb-0">@goal.Name</h5>
                        <div class="text-muted">
                            <strong>@goal.CurrentAmount.ToString("C")</strong> / @goal.TargetAmount.ToString("C")
                        </div>
                    </div>
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar"
                             role="progressbar"
                             style="width: @goal.Progress%; background-color: @goal.Progress >= 100 ; '#28a745' : '#0d6efd';"
                             aria-valuenow="@goal.Progress"
                             aria-valuemin="0"
                             aria-valuemax="100">
                            <span class="sr-only">@goal.Name progress: @goal.Progress%</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const ctx = document.getElementById('incomeExpensesChart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Income', 'Expenses'],
                datasets: [{
                    label: 'Amount ($)',
                    data: [@Model.TotalIncome, @Model.TotalExpenses],
                    backgroundColor: [
                        'rgba(28, 151, 69, 0.7)', 
                        'rgba(220, 53, 69, 0.7)' 
                    ],
                    borderColor: [
                        'rgba(28, 151, 69, 1)',
                        'rgba(220, 53, 69, 1)'
                    ],
                    borderWidth: 2
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            font: {
                                size: 14
                            }
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });
    });
</script>