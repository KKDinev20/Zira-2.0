@inject UserManager<ApplicationUser> UserManager
@inject EntityContext DbContext
@model AnalyticsViewModel

@{
    var user = await UserManager.GetUserAsync(User);
    var currencyCode = user.PreferredCurrencyCode;
    var currency = await DbContext.Currencies.FirstOrDefaultAsync(c => c.Code == currencyCode);
    var preferredCurrency = currency?.Symbol ?? "лв.";
    Layout = "Shared/_AnalyticsLayout";
    ViewData["Title"] = @AnalyticsText.FinancialOverview;
}

<div class="container-xxl flex-grow-1 container-p-y" data-test="financial-overview-container">
    <h4 class="fw-bold py-3 mb-4 d-flex align-items-center gap-2" data-test="financial-overview-header">
        <i class="bx bx-pie-chart-alt text-primary"></i> @AnalyticsText.FinancialOverview
    </h4>

    <div class="row g-4">
        <div class="col-lg-6" data-test="top-expenses-section">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-white py-3 px-4">
                    <h5 class="mb-0 d-flex align-items-center gap-2">
                        <i class="bx bx-bar-chart-alt text-primary"></i> @AnalyticsText.TopExpenses
                    </h5>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover border-2 rounded-lg" data-test="top-expenses-table">                        <thead>
                        <tr>
                            <th class="fw-medium text-nowrap">@TransactionText.Category</th>
                            <th class="fw-medium text-nowrap">@TransactionText.Amount</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var expense in Model.ExpenseAnalytics.TopExpenses)
                        {
                            <tr>
                                <td>
                                    <i class="bx bx-wallet me-2 text-muted"></i>
                                    <strong class="text-nowrap">@expense.Category.GetLocalizedExpenseCategory()</strong>
                                </td>
                                <td>
                                    <span class="badge bg-danger text-white px-3 py-1">
                                        @expense.TotalAmount.ToString("N2") @preferredCurrency
                                    </span>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col-lg-6" data-test="cost-saving-tips-section">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-white py-3 px-4">
                    <h5 class="mb-0 d-flex align-items-center gap-2">
                        <i class="bx bx-bulb text-primary"></i> @AnalyticsText.CostSavingTips
                    </h5>
                </div>
                <div class="card-body">
                    <div class="accordion" id="tipsAccordion" data-test="cost-saving-tips-accordion">
                        
                        @foreach (var category in Model.ExpenseAnalytics.TopExpenses)
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading-@category.Category">
                                    <button class="accordion-button collapsed"
                                            type="button"
                                            data-bs-toggle="collapse"
                                            data-bs-target="#collapse-@category.Category"
                                            aria-expanded="false"
                                            aria-controls="collapse-@category.Category">
                                        <i class="bx bx-category me-1"></i> <strong>@category.Category.GetLocalizedExpenseCategory()</strong>
                                    </button>
                                </h2>
                                <div id="collapse-@category.Category" class="accordion-collapse collapse"
                                     aria-labelledby="heading-@category.Category" data-bs-parent="#tipsAccordion">
                                    <div class="accordion-body">
                                        <ul class="list-group">
                                            @if (Model.ExpenseAnalytics.CostSavingTips.ContainsKey(category.Category))
                                            {
                                                foreach (var tip in Model.ExpenseAnalytics.CostSavingTips[category.Category])
                                                {
                                                    <li class="list-group-item text-muted">
                                                        <i class="bx bx-chevron-right me-1"></i> @tip
                                                    </li>
                                                }
                                            }
                                            else
                                            {
                                                <li class="list-group-item text-muted">
                                                    <i class="bx bx-info-circle me-1"></i> @AnalyticsText.NoTips
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <div class="col-md-6">
                <div class="card shadow-lg border-0" data-test="income-expenses-chart-section">
                    
                    <div class="card-header bg-white py-3 px-4">
                        <h5 class="mb-0 d-flex align-items-center gap-2">
                            <i class='bx bx-credit-card-alt'></i> @TransactionText.IncomeVsExpenses
                        </h5>
                    </div>
                    <div class="card-body p-4" data-test="income-expenses-chart">
                        <div id="incomeExpensesChart"></div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card shadow-lg border-0 mt-4" data-test="savings-goals-section">
                    <div class="card-header bg-white py-3 px-4">
                        <h5 class="mb-0 d-flex align-items-center gap-2">
                            <i class='bx bx-line-chart'></i> @AnalyticsText.SavingsGoalProgress
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        @foreach (var goal in Model.FinancialSummary.SavingsGoals)
                        {
                            <div class="mb-4">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h5 class="mb-0">@goal.Name</h5>
                                    <div class="text-muted">
                                        <strong>@goal.CurrentAmount.ToString("N2") @preferredCurrency</strong> / @goal.TargetAmount.ToString("C")
                                    </div>
                                </div>
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar"
                                         role="progressbar"
                                         style="width: @goal.Progress%; background-color: @goal.Progress >= 100 ; '#28a745' : '#0d6efd';"
                                         aria-valuenow="@goal.Progress"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                        <span class="sr-only">@goal.Progress.ToString("0.##")%</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="card shadow-lg border-0 mt-4" data-test="net-worth-section">
                    <div class="card-header bg-white py-3 px-4">
                        <h5 class="mb-0 d-flex align-items-center gap-2">
                            <i class='bx bx-wallet' ></i> @AnalyticsText.NetWorth
                        </h5>
                    </div>
                    <div class="card-body p-4 text-center">
                        <div class="fs-4 fw-bold text-primary mb-2">
                            @Model.FinancialSummary.NetWorth.ToString("N2") @preferredCurrency
                        </div>
                        <div class="text-muted">@AnalyticsText.TotalNetWorth</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const income = parseFloat("@Model.FinancialSummary.TotalIncome");
        const expenses = parseFloat("@Model.FinancialSummary.TotalExpenses");

        const options = {
            chart: {
                type: 'bar',
                height: 350,
                toolbar: {
                    show: false
                }
            },
            series: [{
                name: 'Сума',
                data: [income, expenses]
            }],
            xaxis: {
                categories: ['Приходи', 'Разходи'],
                labels: {
                    style: {
                        colors: ['#2885a7', '#dc3545']
                    }
                }
            },
            yaxis: {
                labels: {
                    formatter: function(value) {
                        return  value.toLocaleString();
                    }
                },
                title: {
                    text: 'Сума'
                }
            },
            colors: ['#2885a7', '#dc3545'],
            plotOptions: {
                bar: {
                    columnWidth: '45%'
                }
            },
            legend: {
                show: true,
                position: 'bottom',
                horizontalAlign: 'center'
            },
            grid: {
                borderColor: '#e7e7e7',
                strokeDashArray: 3
            },
            tooltip: {
                theme: 'dark',
                y: {
                    formatter: function(val) {
                        return val.toLocaleString() + ' @preferredCurrency';
                    }
                }
            }
        };

        const chart = new ApexCharts(document.querySelector("#incomeExpensesChart"), options);
        chart.render();
    });
</script>