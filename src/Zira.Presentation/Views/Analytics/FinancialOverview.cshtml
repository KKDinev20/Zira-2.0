@inject UserManager<ApplicationUser> UserManager
@inject EntityContext DbContext
@model AnalyticsViewModel

@{
    var user = await UserManager.GetUserAsync(User);
    var currencyCode = user.PreferredCurrencyCode;
    var currency = await DbContext.Currencies.FirstOrDefaultAsync(c => c.Code == currencyCode);
    var preferredCurrency = currency?.Symbol ?? "лв.";
    Layout = "Shared/_AnalyticsLayout";
    ViewData["Title"] = @AnalyticsText.FinancialOverview;
}

<div class="container-xxl flex-grow-1 container-p-y" data-test="financial-overview-container">
    <div class="d-flex align-items-center justify-content-between mb-4">
        <h4 class="fw-bold mb-0 d-flex align-items-center gap-2" data-test="financial-overview-header">
            <i class="bx bx-pie-chart-alt text-primary"></i> @AnalyticsText.FinancialOverview
        </h4>
    </div>

    <div class="row g-4 mb-4">
        <div class="col-md-6">
            <div class="card shadow-lg border-0 overflow-hidden" data-test="budget-vs-actual-chart-section">
                <div class="card-header bg-white py-3 px-4">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bx bx-chart text-primary"></i>
                        <h5 class="mb-0 fw-bold">@AnalyticsText.BudgetVisualization</h5>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div id="budgetComparisonChart"></div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-lg border-0 overflow-hidden" data-test="income-expenses-chart-section">
                <div class="card-header bg-white py-3 px-4">
                    <div class="d-flex align-items-center gap-2">
                        <i class='bx bx-credit-card-alt text-primary'></i>
                        <h5 class="mb-0 fw-bold">@TransactionText.IncomeVsExpenses</h5>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div id="incomeExpensesChart"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-md-6">
            <div class="card shadow-lg border-0 overflow-hidden" data-test="savings-goals-section">
                <div class="card-header bg-white py-3 px-4">
                    <div class="d-flex align-items-center gap-2">
                        <i class='bx bx-line-chart text-primary'></i>
                        <h5 class="mb-0 fw-bold">@AnalyticsText.SavingsGoalProgress</h5>
                    </div>
                </div>
                <div class="card-body p-4">
                    @foreach (var goal in Model.FinancialSummary.SavingsGoals)
                    {
                        <div class="mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="mb-0">@goal.Name</h5>
                                <div class="text-muted">
                                    <strong>@goal.CurrentAmount.ToString("N2") @preferredCurrency</strong> / @goal.TargetAmount.ToString("N2") @preferredCurrency
                                </div>
                            </div>
                            <td>
                                <div class="progress" style="height: 32px; margin-bottom: 5px;">
                                    <div class="progress-bar progress-bar-striped bg-danger"
                                         role="progressbar"
                                         data-progress="@((goal.CurrentAmount / goal.TargetAmount) * 100)"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                    </div>
                                </div>
                            </td>

                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card shadow-lg border-0 overflow-hidden" data-test="net-worth-section">
                <div class="card-header bg-white py-3 px-4">
                    <div class="d-flex align-items-center gap-2">
                        <i class='bx bx-wallet text-primary'></i>
                        <h5 class="mb-0 fw-bold">@AnalyticsText.NetWorth</h5>
                    </div>
                </div>
                <div class="card-body p-4 text-center">
                    <div class="fs-4 fw-bold text-primary mb-2">
                        @Model.FinancialSummary.NetWorth.ToString("N2") @preferredCurrency
                    </div>
                    <div class="text-muted">@AnalyticsText.TotalNetWorth</div>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <div class="card shadow-lg border-0 overflow-hidden" data-test="top-expenses-section">
            <div class="card-header bg-white py-3 px-4">
                <div class="d-flex align-items-center gap-2">
                    <i class="bx bx-bar-chart-alt text-primary"></i>
                    <h5 class="mb-0 fw-bold">@AnalyticsText.TopExpenses</h5>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover border-2 rounded-lg">
                    <thead>
                    <tr>
                        <th class="fw-medium">@TransactionText.Category</th>
                        <th class="fw-medium">@TransactionText.Amount</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var expense in Model.ExpenseAnalytics.TopExpenses)
                    {
                        <tr>
                            <td>@expense.Category.GetLocalizedExpenseCategory()</td>
                            <td>
                                <span class="badge bg-danger text-white px-3 py-1">
                                    @expense.TotalAmount.ToString("N2") @preferredCurrency
                                </span>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var incomeExpensesOptions = {
            chart: {
                type: 'bar',
                height: 350,
                toolbar: {
                    show: false
                },
                dropShadow: {
                    enabled: true,
                    top: 10,
                    left: 5,
                    blur: 3,
                    color: '#03c3ec',
                    opacity: 0.15
                }
            },
            series: [{
                name: "Сума",
                data: [parseFloat(@Model.FinancialSummary.TotalIncome), parseFloat(@Model.FinancialSummary.TotalExpenses)],
                borderRadius: 12,
                startingShape: 'rounded',
                endingShape: 'rounded'
            }],
            plotOptions: {
                bar: {
                    columnWidth: '45%',
                    borderRadius: 12,
                    startingShape: 'rounded',
                    endingShape: 'rounded'
                }
            },
            xaxis: {
                categories: ["Приходи", "Разходи"],
                labels: {
                    style: {
                        colors: ['#03c3ec', '#696cff'],
                        fontSize: '14px',
                        fontFamily: 'Arial, sans-serif'
                    }
                },
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false
                }
            },
            yaxis: {
                labels: {
                    formatter: function(val) {
                        return val.toFixed(2);
                    },
                    style: {
                        fontSize: '12px',
                        fontFamily: 'Arial, sans-serif'
                    }
                }
            },
            colors: ['#03c3ec', '#696cff'],
            stroke: {
                width: 2,
                curve: 'smooth',
                lineCap: 'round'
            },
            grid: {
                show: true,
                padding: {
                    right: 8
                },
                borderColor: '#e7e7e7',
                strokeDashArray: 5,
                opacity: 0.3
            },
            dataLabels: {
                enabled: true,
                formatter: function(val) {
                    return val.toFixed(2);
                },
                style: {
                    fontSize: '12px',
                    colors: ['#fff', '#fff']
                },
                dropShadow: {
                    enabled: true,
                    top: 1,
                    left: 1,
                    blur: 1,
                    opacity: 0.3
                }
            },
            legend: {
                show: true,
                horizontalAlign: 'left',
                position: 'top',
                markers: {
                    height: 8,
                    width: 8,
                    radius: 12,
                    offsetX: -3
                },
                labels: {
                    colors: '#333'
                },
                itemMargin: {
                    horizontal: 10
                }
            }
        };
        new ApexCharts(document.querySelector("#incomeExpensesChart"), incomeExpensesOptions).render();

        var categories = @Html.Raw(Json.Serialize(Model.FinancialSummary.BudgetComparison.Select(b => b.Category)));
        var budgetedAmounts = @Html.Raw(Json.Serialize(Model.FinancialSummary.BudgetComparison.Select(b => b.BudgetedAmount)));
        var actualAmounts = @Html.Raw(Json.Serialize(Model.FinancialSummary.BudgetComparison.Select(b => b.ActualAmount)));

        var budgetComparisonOptions = {
            chart: {
                type: 'line',
                height: 350,
                toolbar: {
                    show: false
                },
                dropShadow: {
                    enabled: true,
                    top: 10,
                    left: 5,
                    blur: 3,
                    color: '#03c3ec',
                    opacity: 0.15
                }
            },
            series: [
                {
                    name: "Бюджетирано",
                    type: 'line',
                    data: budgetedAmounts,
                    stroke: {
                        width: 3,
                        curve: 'smooth',
                        lineCap: 'round',
                        colors: ['#03c3ec']
                    },
                    markers: {
                        size: 8,
                        hover: {
                            size: 10
                        },
                        strokeColors: '#fff',
                        strokeWidth: 2,
                        fillColors: ['#03c3ec','#696cff'],
                        shape: "circle",
                        radius: 2,
                        offsetX: 0,
                        offsetY: 0
                    }
                },
                {
                    name: "Реални разходи",
                    type: 'line',
                    data: actualAmounts,
                    stroke: {
                        width: 3,
                        curve: 'smooth',
                        lineCap: 'round',
                        colors: ['#696cff']
                    },
                    markers: {
                        size: 8,
                        hover: {
                            size: 10
                        },
                        strokeColors: '#fff',
                        strokeWidth: 2,
                        fillColors: '#696cff',
                        shape: "circle",
                        radius: 2,
                        offsetX: 0,
                        offsetY: 0
                    }
                }
            ],
            xaxis: {
                categories: categories,
                labels: {
                    rotate: -45,
                    rotateAlways: true,
                    height: 150,
                    style: {
                        fontSize: '12px',
                        fontFamily: 'Arial, sans-serif'
                    }
                },
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false
                }
            },
            yaxis: {
                title: {
                    text: "Сума"
                },
                labels: {
                    formatter: function(val) {
                        return val.toFixed(2);
                    },
                    style: {
                        fontSize: '12px',
                        fontFamily: 'Arial, sans-serif'
                    }
                }
            },
            colors: ['#03c3ec', '#696cff'],
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                    formatter: function(val) {
                        return val.toFixed(2);
                    }
                },
                style: {
                    fontSize: '14px',
                    fontFamily: 'Arial, sans-serif'
                }
            },
            grid: {
                show: true,
                padding: {
                    right: 8
                },
                borderColor: '#e7e7e7',
                strokeDashArray: 5,
                opacity: 0.3
            },
            legend: {
                show: true,
                horizontalAlign: 'left',
                position: 'top',
                markers: {
                    height: 8,
                    width: 8,
                    radius: 12,
                    offsetX: -3
                },
                labels: {
                    colors: '#333'
                },
                itemMargin: {
                    horizontal: 10
                }
            }
        };
        new ApexCharts(document.querySelector("#budgetComparisonChart"), budgetComparisonOptions).render();
    });
</script>