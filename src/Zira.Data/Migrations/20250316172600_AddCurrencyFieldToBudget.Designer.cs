// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zira.Data;

#nullable disable

namespace Zira.Data.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20250316172600_AddCurrencyFieldToBudget")]
    partial class AddCurrencyFieldToBudget
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Zira.Data.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Zira.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PreferredCurrencyCode");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Zira.Data.Models.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BudgetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SpentPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WarningThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Zira.Data.Models.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "BGN",
                            Name = "Bulgarian Lev",
                            Symbol = "лв."
                        },
                        new
                        {
                            Code = "USD",
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Code = "EUR",
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Code = "GBP",
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Code = "JPY",
                            Name = "Japanese Yen",
                            Symbol = "¥"
                        },
                        new
                        {
                            Code = "CAD",
                            Name = "Canadian Dollar",
                            Symbol = "C$"
                        },
                        new
                        {
                            Code = "AUD",
                            Name = "Australian Dollar",
                            Symbol = "A$"
                        });
                });

            modelBuilder.Entity("Zira.Data.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("ToCurrencyCode");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromCurrencyCode = "BGN",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2506),
                            Rate = 0.5539m,
                            ToCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 2,
                            FromCurrencyCode = "BGN",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2509),
                            Rate = 0.5094m,
                            ToCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            FromCurrencyCode = "BGN",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2511),
                            Rate = 0.4276m,
                            ToCurrencyCode = "GBP"
                        },
                        new
                        {
                            Id = 4,
                            FromCurrencyCode = "BGN",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2512),
                            Rate = 74.76m,
                            ToCurrencyCode = "JPY"
                        },
                        new
                        {
                            Id = 5,
                            FromCurrencyCode = "BGN",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2514),
                            Rate = 0.7456m,
                            ToCurrencyCode = "CAD"
                        },
                        new
                        {
                            Id = 6,
                            FromCurrencyCode = "BGN",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2517),
                            Rate = 0.8284m,
                            ToCurrencyCode = "AUD"
                        },
                        new
                        {
                            Id = 7,
                            FromCurrencyCode = "USD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2605),
                            Rate = 1.805380032496840584943130529m,
                            ToCurrencyCode = "BGN"
                        },
                        new
                        {
                            Id = 8,
                            FromCurrencyCode = "EUR",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2608),
                            Rate = 1.9630938358853553199842952493m,
                            ToCurrencyCode = "BGN"
                        },
                        new
                        {
                            Id = 9,
                            FromCurrencyCode = "GBP",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2609),
                            Rate = 2.3386342376052385406922357343m,
                            ToCurrencyCode = "BGN"
                        },
                        new
                        {
                            Id = 10,
                            FromCurrencyCode = "JPY",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2611),
                            Rate = 0.01337613697164258962011771m,
                            ToCurrencyCode = "BGN"
                        },
                        new
                        {
                            Id = 11,
                            FromCurrencyCode = "CAD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2612),
                            Rate = 1.3412017167381974248927038627m,
                            ToCurrencyCode = "BGN"
                        },
                        new
                        {
                            Id = 12,
                            FromCurrencyCode = "AUD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2615),
                            Rate = 1.2071463061323032351521004346m,
                            ToCurrencyCode = "BGN"
                        },
                        new
                        {
                            Id = 13,
                            FromCurrencyCode = "USD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2930),
                            Rate = 0.9196605885538905939700306915m,
                            ToCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 14,
                            FromCurrencyCode = "EUR",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2964),
                            Rate = 1.0873576756968983117393011385m,
                            ToCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 15,
                            FromCurrencyCode = "USD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2969),
                            Rate = 0.7719805018956490341216826142m,
                            ToCurrencyCode = "GBP"
                        },
                        new
                        {
                            Id = 16,
                            FromCurrencyCode = "GBP",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2973),
                            Rate = 1.2953695042095416276894293732m,
                            ToCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 17,
                            FromCurrencyCode = "USD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2977),
                            Rate = 134.97021122946380213034843835m,
                            ToCurrencyCode = "JPY"
                        },
                        new
                        {
                            Id = 18,
                            FromCurrencyCode = "JPY",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2981),
                            Rate = 0.0074090422685928303905831996m,
                            ToCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 19,
                            FromCurrencyCode = "USD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2986),
                            Rate = 1.3460913522296443401335981224m,
                            ToCurrencyCode = "CAD"
                        },
                        new
                        {
                            Id = 20,
                            FromCurrencyCode = "CAD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2989),
                            Rate = 0.7428916309012875536480686695m,
                            ToCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 21,
                            FromCurrencyCode = "USD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2994),
                            Rate = 1.4955768189203827405668893302m,
                            ToCurrencyCode = "AUD"
                        },
                        new
                        {
                            Id = 22,
                            FromCurrencyCode = "AUD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(2998),
                            Rate = 0.6686383389666827619507484307m,
                            ToCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 23,
                            FromCurrencyCode = "EUR",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3003),
                            Rate = 0.8394189242245779348252846486m,
                            ToCurrencyCode = "GBP"
                        },
                        new
                        {
                            Id = 24,
                            FromCurrencyCode = "GBP",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3006),
                            Rate = 1.1913002806361085126286248831m,
                            ToCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 25,
                            FromCurrencyCode = "EUR",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3011),
                            Rate = 146.76089517078916372202591284m,
                            ToCurrencyCode = "JPY"
                        },
                        new
                        {
                            Id = 26,
                            FromCurrencyCode = "JPY",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3013),
                            Rate = 0.0068138041733547351524879615m,
                            ToCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 27,
                            FromCurrencyCode = "EUR",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3018),
                            Rate = 1.4636827640361209265802905379m,
                            ToCurrencyCode = "CAD"
                        },
                        new
                        {
                            Id = 28,
                            FromCurrencyCode = "CAD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3020),
                            Rate = 0.6832081545064377682403433476m,
                            ToCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 29,
                            FromCurrencyCode = "EUR",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3025),
                            Rate = 1.6262269336474283470749901845m,
                            ToCurrencyCode = "AUD"
                        },
                        new
                        {
                            Id = 30,
                            FromCurrencyCode = "AUD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3029),
                            Rate = 0.6149203283437952679864799614m,
                            ToCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 31,
                            FromCurrencyCode = "GBP",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3034),
                            Rate = 174.8362956033676333021515435m,
                            ToCurrencyCode = "JPY"
                        },
                        new
                        {
                            Id = 32,
                            FromCurrencyCode = "JPY",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3036),
                            Rate = 0.0057196361690743713215623328m,
                            ToCurrencyCode = "GBP"
                        },
                        new
                        {
                            Id = 33,
                            FromCurrencyCode = "GBP",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3044),
                            Rate = 1.7436856875584658559401309635m,
                            ToCurrencyCode = "CAD"
                        },
                        new
                        {
                            Id = 34,
                            FromCurrencyCode = "CAD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3046),
                            Rate = 0.5734978540772532188841201717m,
                            ToCurrencyCode = "GBP"
                        },
                        new
                        {
                            Id = 35,
                            FromCurrencyCode = "GBP",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3052),
                            Rate = 1.9373246024321796071094480823m,
                            ToCurrencyCode = "AUD"
                        },
                        new
                        {
                            Id = 36,
                            FromCurrencyCode = "AUD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3054),
                            Rate = 0.5161757605021728633510381458m,
                            ToCurrencyCode = "GBP"
                        },
                        new
                        {
                            Id = 37,
                            FromCurrencyCode = "JPY",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3060),
                            Rate = 0.0099732477260567148207597646m,
                            ToCurrencyCode = "CAD"
                        },
                        new
                        {
                            Id = 38,
                            FromCurrencyCode = "CAD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3063),
                            Rate = 100.26824034334763948497854057m,
                            ToCurrencyCode = "JPY"
                        },
                        new
                        {
                            Id = 39,
                            FromCurrencyCode = "JPY",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3068),
                            Rate = 0.011080791867308721241305511m,
                            ToCurrencyCode = "AUD"
                        },
                        new
                        {
                            Id = 40,
                            FromCurrencyCode = "AUD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3071),
                            Rate = 90.24625784645098985997102823m,
                            ToCurrencyCode = "JPY"
                        },
                        new
                        {
                            Id = 41,
                            FromCurrencyCode = "CAD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3077),
                            Rate = 1.1110515021459227467811158798m,
                            ToCurrencyCode = "AUD"
                        },
                        new
                        {
                            Id = 42,
                            FromCurrencyCode = "AUD",
                            LastUpdated = new DateTime(2025, 3, 16, 17, 25, 59, 899, DateTimeKind.Utc).AddTicks(3080),
                            Rate = 0.900048285852245292129406084m,
                            ToCurrencyCode = "CAD"
                        });
                });

            modelBuilder.Entity("Zira.Data.Models.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Zira.Data.Models.ReminderSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EnableBillReminders")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableBudgetAlerts")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReminderSettings");
                });

            modelBuilder.Entity("Zira.Data.Models.SavingsGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("UserId");

                    b.ToTable("SavingsGoals");
                });

            modelBuilder.Entity("Zira.Data.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<int?>("Recurrence")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Source")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Zira.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Zira.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Zira.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Zira.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zira.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Zira.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zira.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Zira.Data.Models.Currency", "PreferredCurrency")
                        .WithMany("Users")
                        .HasForeignKey("PreferredCurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreferredCurrency");
                });

            modelBuilder.Entity("Zira.Data.Models.Budget", b =>
                {
                    b.HasOne("Zira.Data.Models.Currency", "Currency")
                        .WithMany("Budgets")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Zira.Data.Models.ApplicationUser", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zira.Data.Models.ExchangeRate", b =>
                {
                    b.HasOne("Zira.Data.Models.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Zira.Data.Models.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("Zira.Data.Models.Reminder", b =>
                {
                    b.HasOne("Zira.Data.Models.ApplicationUser", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zira.Data.Models.ReminderSettings", b =>
                {
                    b.HasOne("Zira.Data.Models.ApplicationUser", "User")
                        .WithMany("ReminderSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zira.Data.Models.SavingsGoal", b =>
                {
                    b.HasOne("Zira.Data.Models.Currency", "Currency")
                        .WithMany("SavingsGoals")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Zira.Data.Models.ApplicationUser", "User")
                        .WithMany("SavingsGoals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zira.Data.Models.Transaction", b =>
                {
                    b.HasOne("Zira.Data.Models.Currency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Zira.Data.Models.ApplicationUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zira.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("ReminderSettings");

                    b.Navigation("Reminders");

                    b.Navigation("SavingsGoals");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Zira.Data.Models.Currency", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("SavingsGoals");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
